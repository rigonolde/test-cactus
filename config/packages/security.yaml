security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    role_hierarchy:
            ROLE_ADMIN:  ROLE_USER
    providers:
        users_in_memory:
            memory:
               users:
                  #test123
                  testcactus:  {password: '$2y$13$rOKj2uYI2YDfjUyixd/oH.G7fEQBo52Ajub5wtLeGEPbIo5klCAka', roles: ['ROLE_USER']}
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js|api)/$
            security: false
        login:
            pattern: ^/api/login
            stateless: true
            provider:  users_in_memory
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true
            security:  true
            provider: users_in_memory
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/api/, roles: ROLE_USER }
